#!/bin/bash

set -e

# $1 - output filename
# $2 - path to kernel
# $3 - path to initrd
# $4 - path to boot config file
# $5 - path config-init (optional)
# $6 - path config.json (optional)
# $7 - path to extras dir (optional)

# size in 1k blocks, default is 60k ie 60meg disk
DISK_SIZE="68k"

MOUNT_POINT="build.images/mnt"

if ! which sfdisk parted extlinux > /dev/null
then,
  print "sfdisk, parted, and/or extlinux is missing, please install"
  exit 1
fi

if [ ! -d $MOUNT_POINT ]
then
  mkdir -p $MOUNT_POINT
fi

if mountpoint -q $MOUNT_POINT
then
  echo "$MOUNT_POINT allready mounted, possibly a failed build needs to be cleaned up?"
  exit 1
fi

MBR_BIN="/usr/lib/syslinux/mbr/mbr.bin"

if [ ! -f "$MBR_BIN" ]
then
  echo "mbr.bin not found install syslinux-common"
  exit 1
fi

if [ $( id -u ) != 0 ]
then
  echo "Must be root"
  exit 1
fi

rm -f $1

echo "Creating image..."
dd if=/dev/zero of=$1 bs=1k count=$DISK_SIZE
drive_loop=$(losetup -f --show $1)
echo "Using loop device '$drive_loop' for image..."

echo "Partitioning image..."
sfdisk $drive_loop << EOF
,,L,*
EOF

offset=$(parted -ms $drive_loop unit b print | grep ^1: | cut -d: -f2 | tr -d B)

partition_loop=$(losetup -f --show -o $offset $drive_loop)
echo "Using loop device '$partition_loop' for partition..."

echo "Formatting partition..."
mke2fs -m 0 -I 128 $partition_loop
tune2fs -c 0 -i 0 $partition_loop

echo "Mounting partition..."
mount $partition_loop $MOUNT_POINT

echo "Copying in kernel and image..."
cp $2 $MOUNT_POINT/vmlinuz.img
scripts/inject_initrd $3 $MOUNT_POINT/initrd.img $5 $6 $7

scripts makelegacyboot $MOUNT_POINT "img" $4

echo "Copying command line..."
cp -f $4 $MOUNT_POINT/cmdline

echo "Installing bootloader..."
extlinux -i $MOUNT_POINT
umount $MOUNT_POINT
losetup -d $partition_loop

echo "Installing MBR..."
dd if=$MBR_BIN of=$drive_loop
sleep 1
sync
losetup -d $drive_loop
echo "Done!"
